
LOG_STORE = []

def log_message(msg):
    print(msg)
    LOG_STORE.append(msg)
    if len(LOG_STORE) > 100:
        LOG_STORE.pop(0)


import pathlib
import json
from datetime import datetime
import pandas as pd
import requests
import time

def load_vendor_codes(xlsx="articuls.xlsx") -> set[str]:
    df = pd.read_excel(xlsx, dtype=str)
    for col in df.columns:
        if col.strip().lower() in ("–∞—Ä—Ç–∏–∫—É–ª—ã", "–∞—Ä—Ç–∏–∫—É–ª", "vendorcode"):
            codes = df[col].dropna().astype(str).str.strip()
            return set(codes)
    raise RuntimeError("–í Excel –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏")

def wb_get_all(limit=100):
    # —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
    return [{"vendorCode": "123", "title": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞", "photos": [], "characteristics": [], "dimensions": {}}]

def dump_filtered(cards, vcodes: set):
    return [c for c in cards if c.get("vendorCode") in vcodes]

def run_transfer(xlsx_path: str, log=print):
    try:
        log("üöÄ –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫–∞—Ä—Ç–æ—á–µ–∫")
        log(f"–ó–∞–≥—Ä—É–∂–∞—é –∞—Ä—Ç–∏–∫—É–ª–∞ –∏–∑ {xlsx_path}")
        vcodes = load_vendor_codes(xlsx_path)
        log(f"–ü–æ–ª—É—á–µ–Ω–æ {len(vcodes)} –∞—Ä—Ç–∏–∫—É–ª–æ–≤")

        wb_all = wb_get_all()
        log(f"–° Wildberries –ø–æ–ª—É—á–µ–Ω–æ {len(wb_all)} –∫–∞—Ä—Ç–æ—á–µ–∫")

        wb_need = dump_filtered(wb_all, vcodes)
        log(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(wb_need)}")

        if not wb_need:
            log("‚ùó –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —ç—Ç–∏–º vendorCode")
            return

        for idx, wb in enumerate(wb_need):
            log(f"‚úî –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ {wb.get('vendorCode')} ‚Äî {wb.get('title')}")
            time.sleep(1)

        log("üéâ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ.")

    except Exception as e:
        import traceback
        log_message("[–û–®–ò–ë–ö–ê] run_transfer —Å–ª–æ–º–∞–ª—Å—è:")
        log_message(traceback.format_exc())
